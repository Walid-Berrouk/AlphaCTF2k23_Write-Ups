#!/usr/bin/python3
from binascii import unhexlify
import random
from Crypto.Util.number import long_to_bytes


def bxor(ba1,ba2):
    l = bytes([_a ^ _b for _a, _b in zip(ba1, ba2)])
    return l

bits = 128
shares = 35

poly = [random.getrandbits(bits) for _ in range(shares)]

# print(poly)
# [34924755744626613971600806144941058497, 144612053290418301038109700426149460916, 229804469698249030216379510854878585326, 108368256637504781684956324451459170795, 283702602242212936692931739416380957063, 139865470785348962888848848576162745581, 204719938335888816776905578394191792902, 263142479765827977376902588708703738385, 232021133788016727535037905605272671762, 68357211054796099606696657893197060094, 184798815781942261778254413969664100716, 34252692136200097464721546336943266038, 331418637370264987216491236665388638472, 188268483590967926352027212410399006350, 235694605378359861464019522406390722789, 309649276899042511842867496986246401026, 143891636662232566508422120288791417140, 35262204165692123541738466456318136124, 27619075937098189822964916595636321686, 21403839615222603469315944315814574944, 112327654313379218858939991120493385883, 119118087726202403201798974405522889793, 311091403863794699528352851203204005024, 34467107789976168272140935319254608367, 22759600134171227973340229312980138036, 202847852192463106857881764484744090942, 205656963478505819039660949361468919309, 251421112656603307130506098615052210135, 281779603311819065996655871447729777246, 110517775478663376271629806210665585816, 87410169338822546278386860928117853782, 338907132761603659571767152813694360912, 25912537317866381004279090814058702798, 321068000164244255885682994900501824885, 276831024873665810034303951231114502153]
flag = open("flag.txt","rb").read()

random.seed(poly[0])
result = bxor(flag, long_to_bytes(random.getrandbits(len(flag)*8))).hex()

# Some printing and transformation
print(result)
flag_enc = bytes.fromhex(result)
print(bytes.fromhex(result))


# Result of xor with knowns part
known_part = b"AlphaCTF{"
print(bxor(flag_enc, known_part))

try:
    x = int(input('Take a sum of shares... BUT ONLY ONE. \n'))
except:
    sys.exit(1)
if  x < 1:
    print('No way')
else:
    print(sum(map(lambda i: poly[i] * pow(x, i), range(len(poly)))))
    # x : my input
    # poly[0]*x^0 + poly[1]*x^1 + poly[2]*x^2 + poly[3]*x^3 + ... + poly[n]*x^n
    # Which the sum of coef